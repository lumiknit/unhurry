// Based on justboil/bulma-switch-control
// https://github.com/justboil/bulma-switch-control/tree/master

@use 'sass:list';

@use 'bulma/sass/utilities' as bulma;

// Variables
$speed-slow: 150ms !default;

$switch-width-number: 2.75 !default;
$switch-width: $switch-width-number * 1em !default;
$switch-padding: 0.2em !default;
$switch-outlined-padding: 0.1em !default;
$switch-active-background-color: bulma.$primary !default;

/* Box-shadow */
$switch-has-shadows: 0 !default;
$switch-knob-has-shadows: 0 !default;

// Functions

// Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);
	@return if(
		$index,
		str-slice($string, 1, $index - 1) + $replace +
			str-replace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			),
		$string
	);
}

// Encode svg function by http://codepen.io/jakob-e/pen/doMoML
@function svg-encode($svg) {
	// Chunk up string in order to avoid "stack level too deep" error
	$encoded: '';
	$slice: 2000;
	$index: 0;
	$loops: ceil(divide(str-length($svg), $slice));
	@for $i from 1 through $loops {
		$chunk: str-slice($svg, $index, $index + $slice - 1);
		// Encode
		$chunk: str-replace($chunk, '"', "'");
		$chunk: str-replace($chunk, '%', '%25');
		$chunk: str-replace($chunk, '#', '%23');
		$chunk: str-replace($chunk, '{', '%7B');
		$chunk: str-replace($chunk, '}', '%7D');
		$chunk: str-replace($chunk, '<', '%3C');
		$chunk: str-replace($chunk, '>', '%3E');

		$encoded: #{$encoded}#{$chunk};
		$index: $index + $slice;
	}
	@return 'data:image/svg+xml,#{$encoded}';
}

@function checkmark($color) {
	$start: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1 1">';
	$content: '<path style="fill:#{$color}" d="M 0.04038059,0.6267767 0.14644661,0.52071068 0.42928932,0.80355339 0.3232233,0.90961941 z M 0.21715729,0.80355339 0.85355339,0.16715729 0.95961941,0.2732233 0.3232233,0.90961941 z"></path>';
	$end: '</svg>';

	@return svg-encode('#{$start}#{$content}#{$end}');
}

@function indeterminate($color) {
	$start: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1 1">';
	$content: '<rect style="fill:#{$color}" width="0.7" height="0.2" x=".15" y=".4"></rect>';
	$end: '</svg>';

	@return svg-encode('#{$start}#{$content}#{$end}');
}

// Switch

.switch {
	cursor: pointer;
	display: inline-flex;
	align-items: center;
	position: relative;
	margin-right: 0.5em;

	& + .switch:last-child {
		margin-right: 0;
	}

	input[type='checkbox'] {
		position: absolute;
		left: 0;
		opacity: 0;
		outline: none;
		z-index: -1;

		+ .check {
			display: flex;
			align-items: center;
			flex-shrink: 0;
			width: $switch-width;
			height: #{$switch-width * 0.5 + $switch-padding};
			padding: $switch-padding;
			background: bulma.$grey-light;
			border-radius: bulma.$radius;
			transition:
				background $speed-slow bulma.$easing,
				box-shadow $speed-slow bulma.$easing;
			@each $name, $pair in bulma.$colors {
				$color: list.nth($pair, 1);
				&.is-#{$name}-passive,
				&:hover {
					background: $color;
				}
				&.input[type='checkbox'] + &.check {
					background: 'pink';
				}
			}

			&:before {
				content: '';
				display: block;
				border-radius: bulma.$radius;
				width: #{($switch-width - $switch-padding * 2) * 0.5};
				height: #{($switch-width - $switch-padding * 2) * 0.5};
				background: bulma.$background;
				transition: transform $speed-slow bulma.$easing;
				will-change: transform;
				transform-origin: left;
				@if $switch-knob-has-shadows == 1 {
					box-shadow:
						0 3px 1px 0 rgba(0, 0, 0, 0.05),
						0 2px 2px 0 rgba(0, 0, 0, 0.1),
						0 3px 3px 0 rgba(0, 0, 0, 0.05);
				}
			}

			&.is-elastic:before {
				transform: scaleX(1.5);
				border-radius: bulma.$radius;
			}
		}

		&:checked + .check {
			background: $switch-active-background-color;
			@each $name, $pair in bulma.$colors {
				$color: list.nth($pair, 1);
				&.is-#{$name} {
					background: $color;
				}
			}

			&:before {
				transform: translate3d(100%, 0, 0);
			}

			&.is-elastic:before {
				// Might be a little offset if base font is not 16px
				transform: translate3d(50%, 0, 0) scaleX(1.5);
			}
		}

		&:focus,
		&:active {
			outline: none;

			+ .check {
				@if $switch-has-shadows == 1 {
					box-shadow: 0 0 0.5em rgba(bulma.$grey, 0.6);
				}
				@each $name, $pair in bulma.$colors {
					$color: list.nth($pair, 1);
					@if $switch-has-shadows == 1 {
						&.is-#{$name}-passive {
							box-shadow: 0 0 0.5em rgba($color, 0.8);
						}
					}
				}
			}

			&:checked + .check {
				@if $switch-has-shadows == 1 {
					box-shadow: 0
						0
						0.5em
						rgba($switch-active-background-color, 0.8);
				}
				@each $name, $pair in bulma.$colors {
					$color: list.nth($pair, 1);
					@if $switch-has-shadows == 1 {
						&.is-#{$name} {
							box-shadow: 0 0 0.5em rgba($color, 0.8);
						}
					}
				}
			}
		}
	}

	.control-label {
		padding-left: 0.5em;
	}

	&:hover {
		input[type='checkbox'] + .check {
			background: rgba(bulma.$grey-light, 0.9);
			@each $name, $pair in bulma.$colors {
				$color: list.nth($pair, 1);
				&.is-#{$name}-passive {
					background: rgba($color, 0.9);
				}
			}
		}

		input[type='checkbox']:checked + .check {
			background: rgba($switch-active-background-color, 0.9);
			@each $name, $pair in bulma.$colors {
				$color: list.nth($pair, 1);
				&.is-#{$name} {
					background: rgba($color, 0.9);
				}
			}
		}
	}

	&.is-rounded {
		input[type='checkbox'] {
			+ .check {
				border-radius: bulma.$radius-rounded;

				&:before {
					border-radius: bulma.$radius-rounded;
				}
			}

			&.is-elastic:before {
				transform: scaleX(1.5);
				border-radius: bulma.$radius-rounded;
			}
		}
	}

	&.is-outlined {
		input[type='checkbox'] {
			+ .check {
				background: transparent;
				border: 0.1rem solid bulma.$grey-light;
				padding: $switch-outlined-padding;
				@each $name, $pair in bulma.$colors {
					$color: list.nth($pair, 1);
					&.is-#{$name}-passive {
						border: 0.1rem solid rgba($color, 0.9);

						&:before {
							background: $color;
						}

						&:hover {
							border-color: rgba($color, 0.9);
						}
					}
				}

				&:before {
					background: bulma.$grey-light;
				}
			}

			&:checked + .check {
				border-color: $switch-active-background-color;
				@each $name, $pair in bulma.$colors {
					$color: list.nth($pair, 1);
					&.is-#{$name} {
						background: transparent;
						border-color: $color;

						&:before {
							background: $color;
						}
					}
				}

				&:before {
					background: $switch-active-background-color;
				}
			}
		}

		&:hover {
			input[type='checkbox'] + .check {
				background: transparent;
				border-color: rgba(bulma.$grey-light, 0.9);
			}

			input[type='checkbox']:checked + .check {
				background: transparent;
				border-color: rgba($switch-active-background-color, 0.9);
				@each $name, $pair in bulma.$colors {
					$color: list.nth($pair, 1);
					&.is-#{$name} {
						border-color: rgba($color, 0.9);
					}
				}
			}
		}
	}

	&.is-small {
		@include bulma.control-small;
	}

	&.is-medium {
		@include bulma.control-medium;
	}

	&.is-large {
		@include bulma.control-large;
	}

	&[disabled] {
		opacity: 0.5;
		cursor: not-allowed;
		color: bulma.$grey;
	}
}

import { Role } from '../llm/message';

/*
 * Message parts.
 * Message parts are used to represent the various types of content
 * that can be included in a message.
 *
 * The message parts has 'type' and 'content', both are strings.
 * The 'type' is used to identify the kind of content.
 * The 'content' is the actual content.
 *
 * Empty type '' is used for plain text, which will be shown as markdown.
 * All other types may be safe to be shown as markdown code blocks.
 *
 * Some special types may be displayed to the user in a special way.
 * - '*fn:call', '*fn:ret': LLM function calling
 * - '*think': Think block, which is used for reasoning model.
 * Asterisk prefix is used when the type is not a real markdown block.
 */

/**
 * Message part type.
 */
export type MsgPartType = string;

// Special message part types

/**
 * MSG_PART_TYPE_TEXT is a just text, not markdown block.
 */
export const MSG_PART_TYPE_TEXT = '';

/**
 * Function call.
 * The content type is FunctionCallInfo.
 */
export const MSG_PART_TYPE_FUNCTION_CALL = '*fn:call';

/**
 * MSG_PART_TYPE_ARTIFACT is an artifact.
 * The content type is ID, which is used for IndexedDB.
 */
export const MSG_PART_TYPE_ARTIFACT = '*artifact';

/**
 * MSG_PART_TYPE_THINK is a think block.
 */
export const MSG_PART_TYPE_THINK = '*think';

/**
 * Message part.
 */
export interface MsgPart {
	type: string;
	typeExtra?: string;
	content: string;
	indent?: string; // Indentation for the message
}

/**
 * Chat message.
 */
export interface Msg<R = Role> {
	role: R;
	parts: MsgPart[];
	timestamp: number;

	// Other options
	uphurry?: boolean; // True if the message is generated by uphurry
}

export const userMsg = (parts: string | MsgPart[]): Msg<'user'> => ({
	role: 'user',
	parts: Array.isArray(parts)
		? parts
		: [{ type: MSG_PART_TYPE_TEXT, content: parts }],
	timestamp: Date.now(),
});

export const assistantMsg = (parts: string | MsgPart[]): Msg<'assistant'> => ({
	role: 'assistant',
	parts: Array.isArray(parts)
		? parts
		: [{ type: MSG_PART_TYPE_TEXT, content: parts }],
	timestamp: Date.now(),
});

/**
 * Group of message pair, user than assistant (Order is important).
 * They are grouped for
 * - More convenient to display in UI
 */
export interface MsgPair {
	user?: Msg<'user'>;
	assistant?: Msg<'assistant'>;
}

export interface ChatHistory {
	msgPairs: MsgPair[];
}
